?rnorm
myfunction <- function() {}
x<-rnorm(100)
}
myfunction <- function() {
> x<-rnorm(100)
> }
myfunction <- function() {> x<-rnorm(100)
> }
myfunction <- function() {
getwd()
dir()
myfunction()
getwd()
x<-list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,3)]
x<-list(foo = 1:4, bar = 0.6, baz = "hello")
> x[c(1,3)]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
> x[c(1,3)]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,3)]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[[c(1,3)]]
q()
swirl()
find.package("devtools")
installed.packages("devtools")
install.packages("devtools")
library(devtools)
find_Rtools()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
ls()
rm(list = ls())
ls()
ls()
rm(list = ls())
ls()
ls()
library(swirl)
install_from_swirl('Getting and Cleaning Data')
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US", country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, r_os == "linux-gnu"| size > 100500)
filter(cran, r_os == "linux-gnu"& size > 100500)
filter(cran, r_os == "linux-gnu" & size > 100500)
filter(cran, r_os == "linux-gnu" AND size > 100500)
filter(cran, r_os == "linux-gnu", size > 100500)
is.na((3,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, descip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version, desc(ip_id)))
arrange(cran2, country, desc(r_version, desc(ip_id)))
arrange(cran2, country, desc(r_version), desc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id,package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3,correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
x <- 4
class(x)
x <- c(4,TRUE)
class(x)
x
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
class(rbind(x,y))
x <- list(2, "a", "b", TRUE)
y <- x[[1]]
class(y)
dim(y)
x <- c(17, 14, 4, 5, 13, 12, 10)
y <- x[x > 10] <- 4
y
x[x > 10] <- 4
x
add2 <- function(x,y){
x+y
}
add2(4,7)
above <- function(x,n){
use <- x > n
x[use]
}
x <- 1:35
above(x,10)
above(x,35)
above(x,35)
above <- function(x,n ==10){
use <- x > n
x[use]
}
above <- function(x,n =10){
use <- x > n
x[use]
}
above(x)
above(x,15)
columnmeans <- function(x){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
column(airquality)
columnmeans(airquality)
columnmeans <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmeans(airquality)
columnmeans <- function(x,removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i],na.rm = removeNA)
}
means
}
columnmeans(airquality)
?sprintf
debug(lm)
lm(y~x)
quuit
quit()
stop()
swirl
?swirl
install.packages("swirl")
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cla_list
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique())
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
unique_vals <- sapply(flags,unique())
unique_vals <- sapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmasses,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$horsepower, mtcars$cyl, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(1:6)
makeVector(1:6)
makeVector()
dim(makeVector)
length(makeVector)
class(makeVector)
john <- makeVector(1:6)
dim(john)
length(john)
class(john)
john$set
matty <- matrix(1:16,4,4)
matty
solve(matty)
matty <- matrix(rnorm(16,4,4)
)
matty <- matrix(rnorm(16,4,4)
)
matty
matty <- matrix(rnorm(16),4,4)
matty
solve(matty)
matty*solve(matty)
matty**solve(matty)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(1:6)
makeVector(1:6)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:5)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:5)
makeVector(1:6)
cachemean(1:6)
x <- list(1:3,1:5,1:4;1:3;1:7)
x <- list(1:3,1:5,1:4,1:3,1:7)
makeVector(x)
cachemean(x)
Mrlisty <- list(1:3,1:5,1:4,1:3,1:7)
makeVector(Mrlisty)
cachemean(Mrlisty)
a <- 5
seta <- function() {
a <- 3
a
}
seta()
print(a)
a <- 5
seta <- function() {
a <<- 3
a
}
seta()
print(a)
y <- 10
y <- 10
f <- function(x) {
y <- 2
y^2 +g(x)
}
g <- function(x) {x*y}
f(3)
setwd("//william-pc/Users/William/ProgrammingAssignment2")
